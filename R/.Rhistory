Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G), naive = FALSE )
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL, nb.trials = 10,
modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL, nb.trials = 10,
modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plotGraph(karate, comm_infomap_karate, Num_clusters)
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL, nb.trials = 10,
modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
'''plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}'''
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL, nb.trials = 10,
modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
# plotGraph <- function(G, community, num_clusters) {
#   community.groups <- cutat(community, num_clusters)
#   #community.subtree <- cutree()
#   dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
#   plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
# }
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plotGraph(karate, comm_infomap_karate, Num_clusters)
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL, nb.trials = 10,
modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
#dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
#comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
#plotGraph(karate, comm_eigen_karate, Num_clusters)
plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
#comm_eigen_karate = LeadingEigen(karate)
#comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
#plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
#comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
#plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
#comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plotGraph(karate, comm_infomap_karate, Num_clusters)
evaluate_graph(karate, community = comm_walk_karate, V_attr = 'Faction', num_comm = Num_clusters)
evaluate_graph(karate, community = comm_walk_karate, V_attr = 'Faction', num_comm = Num_clusters)
## Zachary's karate club
g <- graph.famous("Zachary")
# Init Infomap network
infomap <- Infomap("--two-level --silent")
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
#dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
## Zachary's karate club
g <- graph.famous("Zachary")
# Init Infomap network
infomap <- Infomap("--two-level --silent")
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
#comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL,modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
#dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
#comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plotGraph(karate, comm_infomap_karate, Num_clusters)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plot(structure(list(membership=comm_infomap_karate.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
plot(comm_infomap_karate, karate, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
plot()
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
plot(comm_infomap_karate, karate, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
evaluate_graph(karate, community = comm_walk_karate, V_attr = 'Faction', num_comm = Num_clusters)
evaluate_graph(karate, community = comm_eigen_karate, V_attr = 'Faction', num_comm = Num_clusters)
evaluate_graph(karate, community = comm_infomap_karate, V_attr = 'Faction', num_comm = Num_clusters)
#### FUNCTIONS ###################
GirvanNewman <- function(G) {
#G = as.undirected(G2, mode= "collapse", edge.attr.comb=list(weight="sum", "ignore"))
community <- cluster_fast_greedy(G, weights=NULL)
cat('Number of identified communities: ', length(community))
return (community)
}
Walktrap <- function(G) {
community <- walktrap.community(G, weights = NULL, steps = 4, merges = TRUE, modularity = TRUE, membership = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
LeadingEigen <- function(G) {
community <- leading.eigenvector.community(G, weights = NULL, steps = vcount(G))
cat('Number of identified communities: ', length(community))
return (community)
}
Infomap <- function(G) {
community <- cluster_infomap(G, e.weights = NULL, v.weights = NULL,
modularity = TRUE )
cat('Number of identified communities: ', length(community))
return (community)
}
plotGraph <- function(G, community, num_clusters) {
community.groups <- cutat(community, num_clusters)
#community.subtree <- cutree()
dendPlot(community, mode="hclust", ann=F, xlab=F, ylab=F)
plot(structure(list(membership=community.groups), class="communities"), G, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
}
dynamicGraph <- function(G, community){
members <- membership(comm)
G.d3 <- igraph_to_networkD3(G2, group = members)
# Create force directed network plot
forceNetwork(Links = G.d3$links, Nodes = G.d3$nodes, Source = 'source', Target = 'target', NodeID = 'name', Group = 'group',linkColour = "#afafaf", fontSize=12, zoom=T, legend=T,Nodesize=1, opacity = 0.8, charge=-300, width = 1000, height = 1000)
}
Num_clusters <- 2
comm_karate = GirvanNewman(karate)
comm_walk_karate = Walktrap(karate)
comm_eigen_karate = LeadingEigen(karate)
comm_infomap_karate = Infomap(karate)
par(mfrow=c(1,1))
plotGraph(karate, comm_karate, Num_clusters)
plotGraph(karate, comm_walk_karate, Num_clusters)
plotGraph(karate, comm_eigen_karate, Num_clusters)
#plotGraph(karate, comm_infomap_karate, Num_clusters)
plot(comm_infomap_karate, karate, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
dolphin = read.graph(file="http://users.dimi.uniud.it/~massimo.franceschet/teaching/datascience/network/R/dolphin.gml", format="gml")
summary(dolphin)
vcount(dolphin)
ecount(dolphin)
V(g)
coords = layout.fruchterman.reingold(dolphin)
plot(dolphin, layout=coords, vertex.label=NA, vertex.size=5)
dolphin = read.graph(file="http://users.dimi.uniud.it/~massimo.franceschet/teaching/datascience/network/R/dolphin.gml", format="gml")
summary(dolphin)
vcount(dolphin)
ecount(dolphin)
V(g)
coords = layout.fruchterman.reingold(dolphin)
plot(dolphin, layout=coords, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.8)
dolphin = read.graph(file="http://users.dimi.uniud.it/~massimo.franceschet/teaching/datascience/network/R/dolphin.gml", format="gml")
summary(dolphin)
vcount(dolphin)
ecount(dolphin)
V(g)
coords = layout.fruchterman.reingold(dolphin)
plot(dolphin, layout=coords, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0, vertex.size = 12, vertex.label.cex = 0.2)
dolphin = read.graph(file="http://users.dimi.uniud.it/~massimo.franceschet/teaching/datascience/network/R/dolphin.gml", format="gml")
summary(dolphin)
vcount(dolphin)
ecount(dolphin)
V(g)
coords = layout.fruchterman.reingold(dolphin)
plot(dolphin, layout=coords, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =1, vertex.size = 12, vertex.label.cex = 0.2)
dolphin = read.graph(file="http://users.dimi.uniud.it/~massimo.franceschet/teaching/datascience/network/R/dolphin.gml", format="gml")
summary(dolphin)
vcount(dolphin)
ecount(dolphin)
V(g)
coords = layout.fruchterman.reingold(dolphin)
plot(dolphin, layout=coords, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =10, vertex.size = 12, vertex.label.cex = 0.2)
dolphin = read.graph(file="http://users.dimi.uniud.it/~massimo.franceschet/teaching/datascience/network/R/dolphin.gml", format="gml")
summary(dolphin)
vcount(dolphin)
ecount(dolphin)
V(g)
coords = layout.fruchterman.reingold(dolphin)
plot(dolphin, layout=coords, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0.5, vertex.size = 12, vertex.label.cex = 0.2)
V(dolphin)$color = "white"
V(dolphin)[male]$color = "blue"
male = V(dolphin)$sex == "M"
female = V(dolphin)$sex == "F"
V(dolphin)$color = "white"
V(dolphin)[male]$color = "blue"
V(dolphin)[female]$color = "pink"
plot(dolphin, layout=coords, vertex.label=NA, vertex.size=5)
male = V(dolphin)$sex == "M"
female = V(dolphin)$sex == "F"
V(dolphin)$color = "white"
V(dolphin)[male]$color = "blue"
V(dolphin)[female]$color = "pink"
plot(dolphin, layout=coords, vertex.label=NA, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0.5, vertex.size = 12, vertex.label.cex = 0.2)
male = V(dolphin)$sex == "M"
female = V(dolphin)$sex == "F"
V(dolphin)$color = "white"
V(dolphin)[male]$color = "blue"
V(dolphin)[female]$color = "pink"
plot(dolphin, layout=coords, vertex.label=NA, rescale=T, edge.arrow.size=0.1, vertex.label.dist=0, asp =0.5, vertex.size = 5, vertex.label.cex = 0.2)
